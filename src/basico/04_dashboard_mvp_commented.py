#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Dashboard MVP - Monitoramento de Rede (VERS√ÉO DID√ÅTICA)

Dashboard b√°sico com 4 gr√°ficos para monitoramento de infraestrutura.
Esta vers√£o cont√©m coment√°rios linha a linha para aprendizado.

Autor: Alexandre Lavorenti Cancilieri
Data: 2025-10-19
"""

# ============================================================================
# IMPORTA√á√ïES
# ============================================================================

import plotly.graph_objects as go              # Biblioteca para criar gr√°ficos
from plotly.subplots import make_subplots      # Fun√ß√£o para criar m√∫ltiplos gr√°ficos
from datetime import datetime, timedelta       # Manipula√ß√£o de datas/horas

# ============================================================================
# DADOS DO GR√ÅFICO 1 - TR√ÅFEGO DE REDE (24 HORAS)
# ============================================================================

# Gerar √∫ltimas 24 horas no formato HH:MM
# range(23, -1, -1) = 23, 22, 21... at√© 0 (24 valores)
# datetime.now() = hora atual
# timedelta(hours=i) = subtrai 'i' horas
# strftime('%H:%M') = formata como "14:30"
horas = [(datetime.now() - timedelta(hours=i)).strftime('%H:%M') for i in range(23, -1, -1)]

# Tr√°fego em Mbps para cada hora
# Valores simulados representando um dia t√≠pico:
# - Menor tr√°fego: madrugada (120-150 Mbps)
# - Pico: hor√°rio comercial (220-240 Mbps)
# - Redu√ß√£o: final do dia
trafego_mbps = [120, 135, 145, 150, 160, 155, 170, 180, 190, 185,
                200, 210, 220, 230, 240, 235, 225, 215, 205, 195,
                180, 170, 150, 140]

# ============================================================================
# DADOS DO GR√ÅFICO 2 - STATUS DE INTERFACES POR SWITCH
# ============================================================================

# Lista de switches da infraestrutura
# Hierarquia: CORE ‚Üí DISTRIBUI√á√ÉO ‚Üí ACESSO
switches = ['SW-CORE-01', 'SW-DIST-01', 'SW-DIST-02', 'SW-ACCESS-01', 'SW-ACCESS-02']

# Quantidade de interfaces UP (operacionais) em cada switch
interfaces_up = [22, 18, 20, 45, 42]

# Quantidade de interfaces DOWN (com problemas) em cada switch
# Switch de acesso tem mais interfaces = mais chances de falha
interfaces_down = [2, 6, 4, 3, 6]

# ============================================================================
# DADOS DO GR√ÅFICO 3 - DISTRIBUI√á√ÉO DE VLANS
# ============================================================================

# VLANs configuradas na rede
# Padr√£o comum: 10=Dados, 20=VoIP, 30=WiFi, 40=Servidores, 99=Ger√™ncia
vlans = ['VLAN 10 - Dados', 'VLAN 20 - VoIP', 'VLAN 30 - WiFi',
         'VLAN 40 - Servidores', 'VLAN 99 - Ger√™ncia']

# N√∫mero de dispositivos conectados em cada VLAN
# VLAN Dados tem mais dispositivos (computadores, notebooks)
# VLAN Ger√™ncia tem menos (apenas equipamentos de rede)
num_dispositivos = [150, 80, 120, 35, 15]

# ============================================================================
# DADOS DO GR√ÅFICO 4 - UTILIZA√á√ÉO DE CPU
# ============================================================================

# Dispositivos cr√≠ticos da infraestrutura
# RTR = Roteador, SW = Switch, FW = Firewall
dispositivos = ['RTR-CORE-01', 'RTR-EDGE-01', 'SW-CORE-01', 'FW-01', 'SW-DIST-01']

# Percentual de CPU de cada dispositivo
# Valores: <50% = OK (verde), 50-70% = Aten√ß√£o (laranja), >70% = Cr√≠tico (vermelho)
cpu_percent = [45, 68, 32, 75, 28]

# ============================================================================
# CRIAR ESTRUTURA DO DASHBOARD (2x2 GR√ÅFICOS)
# ============================================================================

# make_subplots() cria uma grade de gr√°ficos
# √â como criar 4 "espa√ßos" para colocar gr√°ficos diferentes
fig = make_subplots(
    rows=2,                                     # 2 linhas de gr√°ficos
    cols=2,                                     # 2 colunas de gr√°ficos
    subplot_titles=(                            # T√≠tulo de cada gr√°fico
        'üìä Tr√°fego de Rede - √öltimas 24h',    # Linha 1, Coluna 1
        'üîå Status de Interfaces por Switch',   # Linha 1, Coluna 2
        'üåê Distribui√ß√£o de Dispositivos por VLAN',  # Linha 2, Coluna 1
        'üíª Utiliza√ß√£o de CPU - Dispositivos Cr√≠ticos'  # Linha 2, Coluna 2
    ),
    specs=[                                     # Especifica tipo de cada gr√°fico
        [{'type': 'xy'}, {'type': 'xy'}],       # Linha 1: ambos tipo XY
        [{'type': 'xy'}, {'type': 'xy'}]        # Linha 2: ambos tipo XY
    ],                                          # IMPORTANTE: usar 'xy' para todos
                                                # Pizza ser√° posicionada manualmente
    vertical_spacing=0.15,                      # Espa√ßo vertical entre gr√°ficos (15%)
    horizontal_spacing=0.25                     # Espa√ßo horizontal entre gr√°ficos (25%)
                                                # Aumentado para evitar sobreposi√ß√£o
)

# ============================================================================
# ADICIONAR GR√ÅFICO 1: LINHA - TR√ÅFEGO DE REDE
# ============================================================================

# add_trace() adiciona um elemento visual ao dashboard
# row=1, col=1 = primeira linha, primeira coluna (canto superior esquerdo)
fig.add_trace(
    go.Scatter(                                 # Scatter = gr√°fico de dispers√£o/linha
        x=horas,                                # Eixo X = hor√°rios
        y=trafego_mbps,                         # Eixo Y = tr√°fego em Mbps
        mode='lines+markers',                   # Desenha linha E pontos
        name='Tr√°fego (Mbps)',                  # Nome na legenda
        line=dict(
            color='#00CC96',                    # Cor verde (padr√£o Plotly)
            width=3                             # Espessura da linha
        ),
        marker=dict(size=6),                    # Tamanho dos pontos marcadores
        fill='tozeroy',                         # Preenche √°rea at√© Y=0
        fillcolor='rgba(0,204,150,0.2)'         # Cor do preenchimento (verde transparente)
                                                # rgba() = Red, Green, Blue, Alpha (transpar√™ncia)
    ),
    row=1, col=1                                # Posi√ß√£o no dashboard
)

# ============================================================================
# ADICIONAR GR√ÅFICO 2: BARRAS AGRUPADAS - STATUS DE INTERFACES
# ============================================================================

# PARTE 1: Barras verdes (interfaces UP)
fig.add_trace(
    go.Bar(                                     # Bar = gr√°fico de barras
        x=switches,                             # Eixo X = nomes dos switches
        y=interfaces_up,                        # Eixo Y = quantidade de interfaces UP
        name='UP',                              # Nome na legenda
        marker_color='#00CC96',                 # Cor verde = operacional
        text=interfaces_up,                     # Exibe valor dentro da barra
        textposition='inside'                   # Texto dentro da barra
    ),
    row=1, col=2                                # Linha 1, Coluna 2 (superior direito)
)

# PARTE 2: Barras vermelhas (interfaces DOWN)
# Ficar√£o lado a lado (barmode='group' no layout)
fig.add_trace(
    go.Bar(                                     # Mesma posi√ß√£o = agrupa automaticamente
        x=switches,                             # Mesmos switches
        y=interfaces_down,                      # Quantidade de interfaces DOWN
        name='DOWN',                            # Nome na legenda
        marker_color='#EF553B',                 # Cor vermelha = problema
        text=interfaces_down,                   # Exibe valor dentro da barra
        textposition='inside'                   # Texto dentro da barra
    ),
    row=1, col=2                                # Mesma posi√ß√£o = agrupa
)

# ============================================================================
# ADICIONAR GR√ÅFICO 3: PIZZA (DONUT) - DISTRIBUI√á√ÉO DE VLANS
# ============================================================================

# Pizza √© adicionada SEM especificar row/col
# Ser√° posicionada manualmente usando 'domain'
fig.add_trace(
    go.Pie(                                     # Pie = gr√°fico de pizza
        labels=vlans,                           # R√≥tulos de cada fatia
        values=num_dispositivos,                # Valores (tamanho das fatias)
        hole=0.4,                               # Buraco central = 40% (donut)
        name="Distribui√ß√£o VLANs",              # Nome do gr√°fico
        marker=dict(
            colors=['#636EFA', '#00CC96', '#AB63FA', '#FFA15A', '#19D3F3']
                                                # Cores customizadas para cada VLAN
        ),
        textinfo='label+percent'                # Mostra nome + percentual
    )
)

# IMPORTANTE: Posicionamento manual da pizza
# Define a posi√ß√£o da pizza no quadrante inferior esquerdo
# domain define a √°rea onde o gr√°fico ser√° desenhado
fig.update_traces(
    domain=dict(
        x=[0, 0.45],                            # Eixo X: 0% a 45% da largura
                                                # Ocupa metade esquerda
        y=[0, 0.4]                              # Eixo Y: 0% a 40% da altura
                                                # Ocupa parte inferior
    ),
    selector=dict(type='pie')                   # Aplica apenas ao gr√°fico de pizza
)

# ============================================================================
# ADICIONAR GR√ÅFICO 4: BARRAS HORIZONTAIS - UTILIZA√á√ÉO DE CPU
# ============================================================================

# Gerar cores dinamicamente baseado no percentual de CPU
# List comprehension que decide cor por valor:
# - Verde (#00CC96): CPU < 50%
# - Laranja (#FFA15A): 50% ‚â§ CPU < 70%
# - Vermelho (#EF553B): CPU ‚â• 70%
cores_cpu = ['#00CC96' if cpu < 50 else '#FFA15A' if cpu < 70 else '#EF553B'
             for cpu in cpu_percent]

fig.add_trace(
    go.Bar(                                     # Bar = gr√°fico de barras
        x=cpu_percent,                          # Eixo X = percentual (horizontal!)
        y=dispositivos,                         # Eixo Y = nomes dos dispositivos
        orientation='h',                        # 'h' = horizontal (barras deitadas)
        marker=dict(
            color=cores_cpu                     # Lista de cores (uma por barra)
                                                # Cores s√£o geradas dinamicamente acima
        ),
        text=[f'{cpu}%' for cpu in cpu_percent], # Adiciona "%" em cada valor
                                                # List comprehension formata texto
        textposition='outside',                 # Texto fora da barra (mais leg√≠vel)
        showlegend=False                        # N√£o mostra na legenda (cores = info visual)
    ),
    row=2, col=2                                # Linha 2, Coluna 2 (inferior direito)
)

# ============================================================================
# CONFIGURAR EIXOS DE CADA GR√ÅFICO
# ============================================================================

# GR√ÅFICO 1 (Linha - Tr√°fego)
# update_xaxes() e update_yaxes() configuram os eixos de gr√°ficos espec√≠ficos
fig.update_xaxes(
    title_text="Hora",                          # T√≠tulo do eixo X
    row=1, col=1                                # Gr√°fico espec√≠fico (linha 1, coluna 1)
)
fig.update_yaxes(
    title_text="Mbps",                          # T√≠tulo do eixo Y
    range=[0, 260],                             # Define escala fixa de 0 a 260 Mbps
                                                # Garante visualiza√ß√£o completa dos dados
    row=1, col=1
)

# GR√ÅFICO 2 (Barras - Interfaces)
fig.update_xaxes(
    title_text="Switches",                      # T√≠tulo do eixo X
    row=1, col=2                                # Gr√°fico das interfaces
)
fig.update_yaxes(
    title_text="Interfaces",                    # T√≠tulo do eixo Y
    range=[0, 60],                              # Define escala de 0 a 60 interfaces
                                                # Acomoda barras empilhadas (UP + DOWN)
    row=1, col=2
)

# GR√ÅFICO 4 (Barras Horizontais - CPU)
fig.update_xaxes(
    title_text="CPU (%)",                       # T√≠tulo do eixo X
    range=[0, 100],                             # For√ßa escala de 0 a 100%
                                                # Sempre mostra escala completa
    row=2, col=2                                # Gr√°fico de CPU
)
fig.update_yaxes(
    title_text="",                              # Sem t√≠tulo (nomes j√° est√£o nos dispositivos)
    row=2, col=2
)

# ============================================================================
# CONFIGURAR LAYOUT GERAL DO DASHBOARD
# ============================================================================

# update_layout() personaliza a apar√™ncia geral do dashboard
fig.update_layout(
    title_text='üåê Dashboard de Monitoramento de Rede - MVP',
                                                # T√≠tulo principal do dashboard
    title_x=0.5,                                # Posi√ß√£o X = 50% (centralizado)
    title_font=dict(
        size=26,                                # Tamanho da fonte
        color='#2C3E50'                         # Cor azul escuro
    ),
    showlegend=True,                            # Mostrar legenda (importante!)
                                                # Legenda mostra UP/DOWN e VLANs
    height=950,                                 # Altura total do dashboard em pixels
                                                # Maior altura evita sobreposi√ß√£o
    plot_bgcolor='#F8F9FA',                     # Cor de fundo dos gr√°ficos (cinza claro)
    paper_bgcolor='white',                      # Cor de fundo da p√°gina (branco)
    font=dict(
        family="Arial",                         # Fonte padr√£o para todo o dashboard
        size=12                                 # Tamanho padr√£o do texto
    ),
    barmode='group',                            # IMPORTANTE: barras lado a lado
                                                # 'group' = agrupadas (UP e DOWN separadas)
                                                # 'stack' = empilhadas (uma sobre a outra)
    annotations=[                               # Lista de anota√ß√µes (textos extras)
        dict(
            text=f'Atualizado em: {datetime.now().strftime("%d/%m/%Y √†s %H:%M:%S")}',
                                                # Texto com data/hora atual
                                                # strftime() formata: 19/10/2025 √†s 17:48:37
            xref='paper',                       # Refer√™ncia X = p√°gina (coordenadas relativas)
            yref='paper',                       # Refer√™ncia Y = p√°gina
            x=0.5,                              # Posi√ß√£o X = 50% (centro horizontal)
            y=-0.05,                            # Posi√ß√£o Y = -5% (abaixo dos gr√°ficos)
                                                # Valor negativo coloca texto no rodap√©
            xanchor='center',                   # √Çncora horizontal no centro
            yanchor='top',                      # √Çncora vertical no topo do texto
            showarrow=False,                    # N√£o mostrar seta apontando
            font=dict(
                size=11,                        # Tamanho menor que o texto principal
                color='#7F8C8D'                 # Cor cinza (menos destaque)
            )
        )
    ]
)

# ============================================================================
# EXPORTAR DASHBOARD PARA HTML
# ============================================================================

# write_html() salva o dashboard como p√°gina web interativa
# ../../ = sobe 2 n√≠veis de diret√≥rio (de src/basico/ para raiz do projeto)
fig.write_html('../../docs/04_dashboard_mvp.html')

# Mensagens de confirma√ß√£o no terminal
print("‚úÖ Dashboard salvo em: 04_dashboard_mvp.html")

# C√°lculo e exibi√ß√£o de estat√≠sticas dos dados
print(f"üìä Total de dispositivos: {sum(num_dispositivos)}")
                                                # sum() soma todos os dispositivos das VLANs
print(f"üîå Total de interfaces: {sum(interfaces_up) + sum(interfaces_down)}")
                                                # Soma interfaces UP + DOWN de todos switches
print(f"‚ö†Ô∏è  Dispositivos cr√≠ticos: {sum(1 for cpu in cpu_percent if cpu > 70)}")
                                                # Conta quantos dispositivos t√™m CPU > 70%
                                                # Generator expression com condicional

# ============================================================================
# COMO USAR ESTE SCRIPT
# ============================================================================
"""
1. Certifique-se de ter Plotly instalado:
   pip install plotly

2. Execute o script:
   python src/basico/04_dashboard_mvp_commented.py

3. Abra o arquivo gerado:
   docs/04_dashboard_mvp.html no navegador

4. Interaja com o dashboard:
   - Passe o mouse sobre gr√°ficos para ver detalhes
   - Clique na legenda para ocultar/mostrar elementos
   - Use bot√µes de zoom e pan (canto superior direito)
   - Clique e arraste para dar zoom em √°rea espec√≠fica
   - Duplo clique para resetar zoom

5. Experimente modificar:
   - Mude 'barmode' de 'group' para 'stack' (barras empilhadas)
   - Troque cores dos gr√°ficos
   - Adicione mais dados (simule 48h ao inv√©s de 24h)
   - Altere 'hole' da pizza para 0 (pizza cheia) ou 0.7 (anel fino)
   - Mude threshold de CPU (cores_cpu)
"""

# ============================================================================
# CONCEITOS APRENDIDOS
# ============================================================================
"""
‚úÖ Criar dashboard com make_subplots()
‚úÖ Usar specs com 'xy' para todos os gr√°ficos
‚úÖ Posicionar pizza manualmente com domain
‚úÖ Combinar diferentes tipos de gr√°ficos
‚úÖ Barras agrupadas (barmode='group')
‚úÖ Barras horizontais (orientation='h')
‚úÖ Colorir dinamicamente com list comprehension
‚úÖ Configurar eixos individualmente (update_xaxes, update_yaxes)
‚úÖ Definir escalas fixas (range=[min, max])
‚úÖ Formatar datas em Python (datetime, strftime)
‚úÖ Adicionar anota√ß√µes de rodap√©
‚úÖ Preencher √°rea sob linha (fill='tozeroy')
‚úÖ Calcular estat√≠sticas com sum() e generator expressions

DIFEREN√áAS IMPORTANTES:
- specs com 'xy': funciona para todos os tipos
- Pizza com domain: posicionamento manual preciso
- barmode='group': barras lado a lado (vs 'stack' empilhadas)
- Escalas fixas: garantem visualiza√ß√£o consistente

QUANDO USAR DASHBOARD:
‚úÖ Monitorar m√∫ltiplas m√©tricas simultaneamente
‚úÖ Visualizar correla√ß√µes entre dados
‚úÖ Apresenta√ß√µes executivas
‚úÖ NOC (Network Operations Center)
‚úÖ Relat√≥rios gerenciais
‚úÖ Troubleshooting de rede

PR√ìXIMOS PASSOS:
- Adicionar mais gr√°ficos (scatter, heatmap, gauge)
- Conectar com dados reais (SNMP, APIs, SSH)
- Implementar refresh autom√°tico
- Adicionar filtros interativos
- Criar alertas visuais din√¢micos
- Integrar com banco de dados
"""

# ============================================================================
# VARIA√á√ïES POSS√çVEIS
# ============================================================================
"""
BARRAS EMPILHADAS (ao inv√©s de agrupadas):
barmode='stack'  # Interfaces UP e DOWN uma sobre a outra

PIZZA CHEIA (sem buraco):
hole=0  # Remove o buraco central

CORES DIFERENTES PARA CPU:
cores_cpu = ['#2ECC71' if cpu < 40 else '#F39C12' if cpu < 60 
             else '#E74C3C' if cpu < 80 else '#C0392B' for cpu in cpu_percent]
# 4 n√≠veis de cores ao inv√©s de 3

ADICIONAR LINHA DE THRESHOLD NO GR√ÅFICO DE CPU:
fig.add_shape(
    type="line",
    x0=70, x1=70, y0=0, y1=1,
    xref="x4", yref="y4 domain",
    line=dict(color="red", width=2, dash="dash"),
    opacity=0.5
)

DASHBOARD VERTICAL (3 linhas x 1 coluna):
fig = make_subplots(rows=3, cols=1, ...)

DARK MODE:
plot_bgcolor='#1E1E1E'
paper_bgcolor='#000000'
font=dict(color='white')

T√çTULO COM MAIS INFORMA√á√ïES:
title_text=f'Dashboard - {datetime.now().strftime("%A, %d de %B de %Y")}'
# Mostra dia da semana e m√™s por extenso
"""